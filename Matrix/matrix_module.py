# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _matrix_module
else:
    import _matrix_module

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numRow = property(_matrix_module.Matrix_numRow_get, _matrix_module.Matrix_numRow_set)
    numCol = property(_matrix_module.Matrix_numCol_get, _matrix_module.Matrix_numCol_set)
    data = property(_matrix_module.Matrix_data_get, _matrix_module.Matrix_data_set)

    def __init__(self):
        _matrix_module.Matrix_swiginit(self, _matrix_module.new_Matrix())
    __swig_destroy__ = _matrix_module.delete_Matrix

# Register Matrix in _matrix_module:
_matrix_module.Matrix_swigregister(Matrix)

def createMatrix(arg1, arg2):
    return _matrix_module.createMatrix(arg1, arg2)

def initMatrix(arg1, arg2):
    return _matrix_module.initMatrix(arg1, arg2)

def printMatrix(arg1):
    return _matrix_module.printMatrix(arg1)

def freeMatrix(arg1):
    return _matrix_module.freeMatrix(arg1)

def addMatrices(arg1, arg2):
    return _matrix_module.addMatrices(arg1, arg2)

def subtractMatrix(arg1, arg2):
    return _matrix_module.subtractMatrix(arg1, arg2)

def scalarMultiply(arg1, arg2):
    return _matrix_module.scalarMultiply(arg1, arg2)

def transposeMatrix(arg1):
    return _matrix_module.transposeMatrix(arg1)

